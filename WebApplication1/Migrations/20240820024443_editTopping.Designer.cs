// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20240820024443_editTopping")]
    partial class editTopping
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ProductSizeJunction", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductSizeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId", "ProductSizeId");

                    b.HasIndex("ProductSizeId");

                    b.ToTable("ProductSizeJunction", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Img", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("IdProduct")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SourceImg")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("IdProduct");

                    b.ToTable("Img");
                });

            modelBuilder.Entity("WebApplication1.Data.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("IdSubCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdSubCategory");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebApplication1.Data.ProductSize", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductSize");
                });

            modelBuilder.Entity("WebApplication1.Data.ProductTopping", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ToppingId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "ToppingId");

                    b.HasIndex("ToppingId");

                    b.ToTable("ProductTopping");
                });

            modelBuilder.Entity("WebApplication1.Data.SubCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IdCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IdCategory");

                    b.ToTable("SubCategory", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Data.Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.ToTable("Topping");
                });

            modelBuilder.Entity("ProductSizeJunction", b =>
                {
                    b.HasOne("WebApplication1.Data.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Data.ProductSize", null)
                        .WithMany()
                        .HasForeignKey("ProductSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.Data.Img", b =>
                {
                    b.HasOne("WebApplication1.Data.Product", "Product")
                        .WithMany("Imgs")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication1.Data.Product", b =>
                {
                    b.HasOne("WebApplication1.Data.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("IdSubCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("WebApplication1.Data.ProductTopping", b =>
                {
                    b.HasOne("WebApplication1.Data.Product", "Product")
                        .WithMany("ProductToppings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.Data.Topping", "Topping")
                        .WithMany("ProductToppings")
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Topping");
                });

            modelBuilder.Entity("WebApplication1.Data.SubCategory", b =>
                {
                    b.HasOne("WebApplication1.Data.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WebApplication1.Data.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("WebApplication1.Data.Product", b =>
                {
                    b.Navigation("Imgs");

                    b.Navigation("ProductToppings");
                });

            modelBuilder.Entity("WebApplication1.Data.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebApplication1.Data.Topping", b =>
                {
                    b.Navigation("ProductToppings");
                });
#pragma warning restore 612, 618
        }
    }
}
